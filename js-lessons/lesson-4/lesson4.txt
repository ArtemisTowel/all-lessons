Function Basics

    Goals
        how to define and invoke different kinds of functions
        how to use the return value
        what function scope is
    
    functions

    Ex:

        function favoriteAnimal(animal) {
            return animal + " is my favorite animal!"
        }
        console.log(favoriteAnimal('Goat'))

    the function definition is written on the first line
        function favoriteAnimal(animal).
    
    the parameter animal is found inside the parentheses

    by putting animal inside the parentheses of the favoriteAnimal() function,
    we're telling JS that we will send /some/ value to our new function.
    This means that animal is just a /placeholder/ for a future value.
    But what value are we sending?

    The last line, favoriteAnimal('Goat') is where we are calling our
    favoriteAnimal function and passing the value 'Goat' inside the function
    Here, 'Goat' is our /argument/. we're telling favoriteAnimal function
    "Please send 'Goat' to the favoriteAnimal function and use 'Goat'
    where the 'animal' placeholder is." 

    Because of the flexibility that using a parameter provides, we can 
    declare any animal to be our favorite.

    diagram
                        Paramters
        function sum(param1, param2) {
            return paramter1 + parameter2;
        }

        sum(1,2)
              ^--- arguments

    Make note of the fact that when we call this function:
    
     function favoriteAnimal(animal) {
            return animal + " is my favorite animal!"
        }
        console.log(favoriteAnimal('Goat'))
    
    we get the return value of the function, string of "Goat is my
    favorite animal!" printed to the console. We're passing in a function
    call favoriteAnimal('Goat') as an argument in a different function
    call - log().

    We will pass function calls as arguments somewhat often.
    If we just called the function without console.log, nothing would 
    appear in the console, but the function would return the right string.

*Scope*

    When you create a function, the varialbes and other things defined
    inside the function are inside their own separate /Scope/. This means
    that they are locked away in their own separate compartments, unreachable
    from code outside the functions.

    The tope level outside all your functions is called the Global Scope.
    Values defind in the Global Scope are accessible from anywhere in the code.

    JS is set up like this for various reasons - but mainly because of security
    and organization. Sometimes you dont wan't variables to be accessible
    from everywhere in the code - external scripts that you call in from
    elsewhere could start to mess with your code and cause problems because
    they happen to be using the same variable names as other parts of code,
    causing conflicts. This might be done maliciously or just on accident.

    Ex: you have HTML calling two external JS files, and both JS files
    have a variable and function defined using the same name:
    
    HTML
        <script src="first.js"></script>
        <script src="second.js"></script>
        <script>
            greeting();
        </script>

    first JS
        const name = "Chris";
        function greeting() {
        alert(`Hello ${name}: welcome to our company.`);
        }

    second JS 
        const name = "Zaptec";
        function greeting() {
        alert(`Our company is called ${name}.`);
        }

    Both functions you want to call are called greeting(), but you can only 
    ever access the first.js file's greeting() function (2nd one is ignored)
    In addition, an error results when attempting (in the second.js file) to
    assign a new value to the name variable - because it was already declared
    with const, and so cant be reassigned.

    Keeping parts of your code locked away in functions avoid such problems,
    and is considered the best practice.

Return Values

    the values that a function returns when it completes.

 Ex:
    const myText = "The weather is cold";
    const newString = myText.replace("cold", "warm");
    console.log(newString); // Should print "The weather is warm"
    
    The replace() string function takes a string, replaces one substring 
    with another, and returns a new string with the replacement made

    The replace() function is invoked on the myTest string, and is passed 
    two parameters.
    -the substring to find ('cold')
    -the string to replace it with

    Upon completion, the return value is saved in the variable newString.

    Some functions don't return any value.

    Generally, a return value is used where the function is an intermediate 
    step in a calculation of some kind.

    Once stored in a variable, this variable can be used in the next stage
    of the calculation.

Local variable vs Global variables

    Local Variables are defined inside a function.
    Ex:
        function showMessage() {
        let message = "Hello, I'm JavaScript!"; // local variable

        alert( message );
        }

    Global Variables are defined outside a function.
    Ex:
        let userName = 'John'; // Global
        function showMessage() {    
        let userName = "Bob"; // Local
        let message = 'Hello, ' + userName; // Bob
        alert(message); }

Parameters vs Arguments

    Parameters are the names for the variables inside the function's 
    parentheses at the time of delcaration. aka Declaration Time terms.

    Arguments are the values passed to the function in the place of the 
    previous parameters when the function is called. aka Call Time terms.

Default Values

    If a function is called, but an argument is not provided, then the
    corresponding value becomes undefined.

    For instance, the aforementioned function showMessage(from, text)
    can be called with a single argument:

        showMessage("Ann");

    That's not an error. Such a call would output "Ann: undefined". As the
    value for the text isn't passed, it becomes udnefined.

    We can specify the so-called "defualt" (to use if omitted) value for a 
    parameter in the function declaration, using =:

    Ex: function showMessage(from, text = "no text given") {
        alert( from + ": " + text );
        }
        showMessage("Ann"); // Ann: no text given

    Now if the text parameter is not passed, it will get the value
    "no text given".

    The default value also jumps in if the parameter exists, but
    strictly equals undefined, like this:

    Ex: showMessage("Ann", undefined); // Ann: no text given

    Here, "no text given" is a string, but it can be a more complex
    expression, which is only evaluated and assigned if the parameter
    is missing. So, this is also possible:

    Ex: function showMessage(from, text = anotherFunction()) {
        // anotherFunction() only executed if no text given
        // its result becomes the value of text
        }

Evaluation of default parameters

    In JS, a default parameter is evaluated every time the function is
    called without the respective parameter.

    In the example above, anotherFunction() isn't called at all, if the 
    text parameter is provided.

    On the other hand, it's independently called every time text is missing.

Default parameters in old Java Script code

    Several years ago, JS didn't support the syntax for default parameters
    so people used other ways to specify them.

    Nowadays, we come acress them in old scripts.

    For Example, an explicit check for undefined:

    Ex: function showMessage(from, text) {
        if (text === undefined) {
        text = 'no text given';
        }

        alert( from + ": " + text );
        }

    as well as by using the OR || operator:

    Ex: function showMessage(from, text) {
        // If the value of text is falsy, assign the default value
        // this assumes that text == "" is the same as no text at all
        text = text || 'no text given';
        ...
        }

Alternative Default parameters

    Sometimes it makes sense to assign default values for parameters at a
    later stage after the function declaration.

    We can check if the parameter is passed durinf the function execution,
    by comparing it with undefined:

    Ex: function showMessage(text) {
        // ...

        if (text === undefined) { // if the parameter is missing
        text = 'empty message';
        }

        alert(text);
        }

        showMessage(); // empty message

    we can also use ||

    Ex: function showMessage(text) {
        // if text is undefined or otherwise falsy, set it to 'empty'
        text = text || 'empty';
        ...
        }

    Modern JS engines support the nullish coalescing operator ?? it's 
    better when most falsy values, such as 0, should be considered normal:

    Ex: function showCount(count) {
        // if count is undefined or null, show "unknown"
        alert(count ?? "unknown");
        }

        showCount(0); // 0
        showCount(null); // unknown
        showCount(); // unknown

Returning a value

    a function can return a value back into the calling code as the result
    The simplest example would be a function that sums two values:

    Ex: function sum(a, b) {
        return a + b;
    }

    let result = sum(1, 2);
    alert( result ); //3

    The directive return can be in any place of the function. When the
    execution reaches it, the function stops, and the value is returned to
    the calling code (assigned to result above)

    There may be occurances of return in a single function.

    Ex: function checkAge(age) {
        if (age >= 18) {
        return true;
        } else {
        return confirm('Do you have permission from your parents?');
        }
        }

    It is possible to use reutnr without a value. That causes the function
    to exit immediately.

    Ex: function showMovie(age) {
        if ( !checkAge(age) ) {
        return;
        }

        alert( "Showing you the movie" ); // (*)
        // ...
        }

    in the code above, if checkAge(age) returns false, then showMovie
    won't proceed to the alert.

    Functions with an empty return or without it returns undefined.
    an Empty return is also the same as return undefined:

    Ex: function doNothing() {
        return;
        }

        alert(doNothing() === undefined ); // true

    ***NEVER ADD A NEWLINE BETWEEN RETURN AND THE VALUE***
    A new line after return is like putting a semicolon after return.
    It effectively becomes an empty return.

    If we want the returned expression to wrap multiple lines, we should 
    add an open parentheses on the same line as the return:

    Ex: return (
        some + long + expression
        + or +
        whatever * f(a) + f(b)
        )   
    
Naming a function

    Functions are actions. So their name is usually a verb. 
    It should be brief, as accurate as possible and describe what the 
    function does, so that someone reading the code gets an indication 
    of what the function does.

    It is a widespread practice to start a function with a verbal prefix which vaguely describes the action. There must be an agreement within the team on the meaning of the prefixes.

    For instance, functions that start with "show" usually show something.

    Function starting with…

    "get…" – return a value,
    "calc…" – calculate something,
    "create…" – create something,
    "check…" – check something and return a boolean, etc.
    
    Examples of such names:

    showMessage(..)     // shows a message
    getAge(..)          // returns the age (gets it somehow)
    calcSum(..)         // calculates a sum and returns the result
    createForm(..)      // creates a form (and usually returns it)
    checkPermission(..) // checks a permission, returns true/false
    
    With prefixes in place, a glance at a function name gives an
    understanding what kind of work it does and what kind of value it 
    returns.

    One function – one action
    A function should do exactly what is suggested by its name, no more.

    Two independent actions usually deserve two functions, even if they 
    are usually called together (in that case we can make a 3rd function 
    that calls those two).

    A few examples of breaking this rule:

    getAge – would be bad if it shows an alert with the age (should only get).
    createForm – would be bad if it modifies the document, adding a form to it (should only create it and return).
    checkPermission – would be bad if it displays the access granted/denied message (should only perform the check and return the result).
    examples assume common meanings of prefixes. You and your team are free to agree on other meanings, but usually they’re not much different. In any case, you should have a firm understanding of what a prefix means, what a prefixed function can and cannot do. All same-prefixed functions should obey the rules. And the team should share the knowledge.

    Ultrashort function names
    Functions that are used very often sometimes have ultrashort names.

    Ex: jQuery framework defines a function with $. The Lodash library has
        its core function named _.

    These are exceptions. Generally function names should be concise 
    and descriptive.

Functions == Comments
    
    Functions should be short and do exactly one thing. If that thing is 
    big, maybe it’s worth it to split the function into a few smaller 
    functions. Sometimes following this rule may not be that easy, but 
    it’s definitely a good thing.

    A separate function is not only easier to test and debug – its very 
    existence is a great comment!

    For instance, compare the two functions showPrimes(n) below. Each one 
    outputs prime numbers up to n.

    The first variant uses a label:

    Ex: function showPrimes(n) {
        nextPrime: for (let i = 2; i < n; i++) {

        for (let j = 2; j < i; j++) {
        if (i % j == 0) continue nextPrime;
        }

        alert( i ); // a prime
        }
        }

    The second variant uses an additional function isPrime(n) to test for 
    primality:

    Ex: function showPrimes(n) {
        for (let i = 2; i < n; i++) {
        if (!isPrime(i)) continue;

        alert(i);  // a prime
        }
        }

        function isPrime(n) {
        for (let i = 2; i < n; i++) {
        if ( n % i == 0) return false;
        }
        return true;
        }

    The second variant is easier to understand, isn’t it? Instead of the 
    code piece we see a name of the action (isPrime). Sometimes people 
    refer to such code as self-describing.

    So, functions can be created even if we don’t intend to reuse them. 
    They structure the code and make it readable.

Summary

    a function declaration looks like this:

    ex: function name(parameters, delimited, by, comma) {
        code
        }

    Values passed to a function as parametersare copied to local variables
    
    A function may access Global variables, but it only works inside out.
    the code outside the function doesn't see its local variables.

    functions can return a value. If it doesn't, then its result is undefined

    To make the code clean and easy to understand, it's recommended to use
    mainly local variables and parameters in the function, not outer variables.

    It is always easier to understand a function which gets parameters,
    works with them, and returns a result, than a function which gets no
    paramaters, but modifies global variables as a side effect.

    Function naming:

    a name should clearly describe what the function does. When we see
    a function call in the code, a good name instantly gives us an
    understanding of what it does and returns.

    a function is an action, so function names are usually verbal.

    There exist many well-known function prefixes like create..., show...,
    get..., check... and so on. Use them to hint what a function does.

    Functions are the main building blocks of scripts. Now we've covered
    the basics, so we actually can start creating and using them. But 
    that;s only the beginning of the path, we are going to return to them many
    times, going more deeply into their advanced features.

Functions are Values

    no matter how the function is created, a function is a value.

    Two ways of creating a function. Declarations and Expressions.

    Declaration

        function sayHi() {
            alert( "Hello" );
        }

    Expression

        let sayHi = function() {
            alert( "Hello" );
        }

    In an expression, the function is created on the equation's right side.

    JS reads, creates, and uses expressions and declarations differently.

    A function Expressions is created when the execution reaches it and it
    is usable only from that moment on.

        Once the execution flow passes to the right side of the assignment
        let sayHi = function ...

        now the function is created and can be used from now on.
    
    function Declarations are different.

        **A Function Declaration can be called earlier than it is defined.

    The order of JS algorithms read for declarations before executing.
    Even if you call a function before a delcaration in the script, JS will 
    find that declaration before executing and thus declarations can be 
    called before they are defined.

    Expressions must be executed to be used. 
    Declarations are identified before execution. 

Protip: show the coding of the function

    Ex: alert( sayHi );

    Shows the functions code because there are no parentheses after sayHi.


Arrow Functions, basic concept

    long form function:

        let sum = function(a, b) {
        return a + b;
        }

    Arrow function form:

        let sum = (a, b) => a + b;

    another example:

    let double = n => n * 2;
    // roughly the same as: let double = function(n) { return n * 2 }

THE CALL STACK basic concept

    JS engine uses a call stack to manage executions contexts:
    -The Global Execution context
    -Function execution contexts

    The call stack works on Last In First Out (LIFO) principle

    When you execute a script, the JavaScript engine creates a global execution context and pushes it on top of the call stack.

    Whenever a function is called, the JavaScript engine creates a function execution context for the function, pushes it on top of the call stack, and starts executing the function.

    If a function calls another function, the JavaScript engine creates a new function execution context for the function being called and pushes it on top of the call stack.

    When the current function completes, the JavaScript engine pops it off the call stack and resumes the execution where it left off.

    The script will stop when the call stack is empty.

    ** My Own Words** The call stack is reading everything first to make
    sure it does everything correctly, before just blowing through code.
    Thus the reason declarations are executable immediately. You're stating
    a fact for it to read, not giving it new variables to stack up

    when you have a function inside a function, JS is designed to properly
    identify anything that has to be done prior to the original function so 
    that the original function is executed properly.

    This would include deciphering the function within the function as That
    impacts how the original function will operate upon execution.

    Ex: function add(a, b) {
        return a + b;
        }

        function average(a, b) {
        return add(a, b) / 2;
        }

        let x = average(10, 20);

    Call stack will look like this (but flipped upside down like a graph):

            main        main        main        main        main
                        average()   average()   average()
                                    add()       

    Notice how the call stack builds as it identifies the proper order of
    actions in order to execute this block of code in correcet order before
    executing the code in said order, eliminating items off the stack

    This is the basic function of the call stack.

ANYONYMOUS Functions
    
    Usually functions are given names like 

            function myFunction() {
                alert("Hello");
            }
        
    But they may be created without names such as

            (function () {
                alert("hello");
            });

    Anonymous functions are most common when a function expects to recieve
    another function as a parameter. In this case, the function parameter is
    often passed as an anonymous function

    let's say we want to run code when the user types into a text box.
    we can call the addEventListener() function of the text box.
    this function expects us to pass it at least two parameters

        - name of the event to listen for, in this case keydown
        -a function to run when the event happens

    when the user preses a key the browser will call the function
    you provided, and will pass it a parameter containing information
    about this event, including the particular key that the user pressed.

        function lokKey(event){
            console.log('You pressed "${event.key}".');
        }
        
        text.Box.addEventListener(":keydown", logkey);

    Instead of defining a separate logKey() function, you can pass an
    anonymous function into addEventListener() :

        textBox.addEventListener("keydown", function (event) {
            console.log(`You pressed "${event.key}".`)
        });

Example of converting this anyonymous function to an arrow function

    If we pass an anonymous function like this, there's an Alternative
    form we can use, called an arrow function. Instead of function(event)
    we just write (event) =>:

        textBox.addEventListener("keydown", (event)=> {
            console.log(`You pressed "${event.key}".`);
        });

    If the function only takes one paramter, you can omit ther parentheses
    around the parameter:

        textBox.addEventListener("keydown", event => {
            console.lof(`You pressed "${event.key}".`);
        });

    Finally, if our function contains only one line that's a return statement,
    we can also omit the braces and the return keyword and implicitly return
    the expression. In the following example, we're using the map() method
    of Array to double every value in the original array:

        const originals = [1, 2, 3]

        const doubled = originals.map(item => item * 2);

        console.log(doubled)
    
    The map() method takes each item in the array in turn, passing it into
    the given function. It then takes the value returned by that function
    and adds it to a new array.

    So in the example above, item => item * 2 is the arrow function 
    equivalent of:

        function doubleItem(item) {
            return item * 2;
        }

    You can use the same concise syntax to rewrite the addEventListener Ex

        textBox.addEventListener("keydown", (event) =>
            console.log(`You pressed "${event.key".`}),
        );

    In this case, the value of console.log(), which is undefined, is 
    implicitly returned from the callback function.

Let vs Var

    Scope

    main difference is scope.

    Variables declared by var are scoped to the immediate function body
    (hence the function scope)

    let variables are scoped to the immediate /enclosing/ block denoted 
    by {} (hence the block scope)

    The reason why let keyword was introduced to the language was function 
    scope is confusing and was one of the main sources of bugs in JS.

    People had to create immediately invoked functions to capture correct 
    values from the loops but that was also hairy.

    Hoisting

    Variables declared with var keyword are hoisted and initialized which 
    means they are accessible in their enclosing scope even before they are 
    declared, however their value is undefined before the declaration 
    statement is reached.

    Creating global object property

    At the top level, let, unlike var, does not create a property on the 
    global object.

    Redeclaration

    In strict mode, var will let you re-declare the same variable in the 
    same scope while let raises a SyntaxError.