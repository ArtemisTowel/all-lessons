Intro
    -Much dev time spent on reading code, not just writing.
    -Clean code does not have to be mastered immediately.
    -The more you write, the better it gets.
    -Test these ideas and think of them as I go.
    -Gradual improvement, not perfection

Lesson Overview
    -Learn easy to read code vs hard to read.
    -Use programming principles to code cleaner.
    -Write good comments.

What is clean code?

    Consider following code:

----------------------------------

    EX. A:

        const x = function (z) {
            const w = "Hello ";
        return w + z
        };

        x("John");

    EX. B:

        const generateUserGreeting = function (name) {
            const greeting = "Hello ";
            return greeting + name;
        };

        generateUserGreeting("John");

----------------------------------

    EX. B:
    -Single-letter variable, indentation inconsistent.
    -Code is confusing and messy.
    
    EX. A:
    -Proper variable names and indentation.
    -Easy to read, structured, clean.

    If I were the person on a project who wrote EX.B., I'd cause some stress
    for other people who have to read and work on my code.

    Be the person who takes an extra minute to name and indent properly.
    Anyone can look at that and guess what's happening there. It's Professional.

    Single characters can be used as variable names in a loop or callback function,
    but avoid them elsewhere.

    About camelCase
    -when a variable name consists of multiple words like setTimeout,
        first word is lowercase and following words are uppercase.

Naming functions and variables
    
    A good name is descriptive.
        -See EX.A vs EX.B above.
    
    Use consistent vocab

    ------------------------------
     // Good
    function getPlayerScore();
    function getPlayerName();
    function getPlayerTag();

    // Bad
    function getUserScore();
    function fetchPlayerName();
    function retrievePlayer1Tag();
    ------------------------------

        -Variables always start with a noun or an adjective
        -Functions always start with a verb. Functions are what we do.
    
    Another example of why this matters:

------------------------------
// Good
const numberOfThings = 10;
const myName = "Thor";
const selected = true;

// Bad (these start with verbs, could be confused for functions)
const getCount = 10;
const isSelected = true;

// Good
function getCount() {
  return numberOfThings;
}

// Bad (it's a noun)
function myName() {
  return "Thor";
}
----------------------------------

CAPITALIZE CONSTANTS THAT WILL NEVER CHANGE LIKE MILLISECONDS PER HOUR

